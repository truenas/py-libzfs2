#ifndef _PYLIBZFS2_ENUMS_H
#define _PYLIBZFS2_ENUMS_H

static const struct {
	zfs_error_t error;
	const char *name;
} zfserr_table[] = {
	{ EZFS_SUCCESS, "EZFS_SUCCESS" },
	{ EZFS_NOMEM, "EZFS_NOMEM" },
	{ EZFS_BADPROP, "EZFS_BADPROP" },
	{ EZFS_PROPREADONLY, "EZFS_PROPREADONLY" },
	{ EZFS_PROPTYPE, "EZFS_PROPTYPE" },
	{ EZFS_PROPNONINHERIT, "EZFS_PROPNONINHERIT" },
	{ EZFS_PROPSPACE, "EZFS_PROPSPACE" },
	{ EZFS_BADTYPE, "EZFS_BADTYPE" },
	{ EZFS_BUSY, "EZFS_BUSY" },
	{ EZFS_EXISTS, "EZFS_EXISTS" },
	{ EZFS_NOENT, "EZFS_NOENT" },
	{ EZFS_BADSTREAM, "EZFS_BADSTREAM" },
	{ EZFS_DSREADONLY, "EZFS_DSREADONLY" },
	{ EZFS_VOLTOOBIG, "EZFS_VOLTOOBIG" },
	{ EZFS_INVALIDNAME, "EZFS_INVALIDNAME" },
	{ EZFS_BADRESTORE, "EZFS_BADRESTORE" },
	{ EZFS_BADBACKUP, "EZFS_BADBACKUP" },
	{ EZFS_BADTARGET, "EZFS_BADTARGET" },
	{ EZFS_NODEVICE, "EZFS_NODEVICE" },
	{ EZFS_BADDEV, "EZFS_BADDEV" },
	{ EZFS_NOREPLICAS, "EZFS_NOREPLICAS" },
	{ EZFS_RESILVERING, "EZFS_RESILVERING" },
	{ EZFS_BADVERSION, "EZFS_BADVERSION" },
	{ EZFS_POOLUNAVAIL, "EZFS_POOLUNAVAIL" },
	{ EZFS_DEVOVERFLOW, "EZFS_DEVOVERFLOW" },
	{ EZFS_BADPATH, "EZFS_BADPATH" },
	{ EZFS_CROSSTARGET, "EZFS_CROSSTARGET" },
	{ EZFS_ZONED, "EZFS_ZONED" },
	{ EZFS_MOUNTFAILED, "EZFS_MOUNTFAILED" },
	{ EZFS_UMOUNTFAILED, "EZFS_UMOUNTFAILED" },
	{ EZFS_UNSHARENFSFAILED, "EZFS_UNSHARENFSFAILED" },
	{ EZFS_SHARENFSFAILED, "EZFS_SHARENFSFAILED" },
	{ EZFS_PERM, "EZFS_PERM" },
	{ EZFS_NOSPC, "EZFS_NOSPC" },
	{ EZFS_FAULT, "EZFS_FAULT" },
	{ EZFS_IO, "EZFS_IO" },
	{ EZFS_INTR, "EZFS_INTR" },
	{ EZFS_ISSPARE, "EZFS_ISSPARE" },
	{ EZFS_INVALCONFIG, "EZFS_INVALCONFIG" },
	{ EZFS_RECURSIVE, "EZFS_RECURSIVE" },
	{ EZFS_NOHISTORY, "EZFS_NOHISTORY" },
	{ EZFS_POOLPROPS, "EZFS_POOLPROPS" },
	{ EZFS_POOL_NOTSUP, "EZFS_POOL_NOTSUP" },
	{ EZFS_POOL_INVALARG, "EZFS_POOL_INVALARG" },
	{ EZFS_NAMETOOLONG, "EZFS_NAMETOOLONG" },
	{ EZFS_OPENFAILED, "EZFS_OPENFAILED" },
	{ EZFS_NOCAP, "EZFS_NOCAP" },
	{ EZFS_LABELFAILED, "EZFS_LABELFAILED" },
	{ EZFS_BADWHO, "EZFS_BADWHO" },
	{ EZFS_BADPERM, "EZFS_BADPERM" },
	{ EZFS_BADPERMSET, "EZFS_BADPERMSET" },
	{ EZFS_NODELEGATION, "EZFS_NODELEGATION" },
	{ EZFS_UNSHARESMBFAILED, "EZFS_UNSHARESMBFAILED" },
	{ EZFS_SHARESMBFAILED, "EZFS_SHARESMBFAILED" },
	{ EZFS_BADCACHE, "EZFS_BADCACHE" },
	{ EZFS_ISL2CACHE, "EZFS_ISL2CACHE" },
	{ EZFS_VDEVNOTSUP, "EZFS_VDEVNOTSUP" },
	{ EZFS_NOTSUP, "EZFS_NOTSUP" },
	{ EZFS_ACTIVE_SPARE, "EZFS_ACTIVE_SPARE" },
	{ EZFS_UNPLAYED_LOGS, "EZFS_UNPLAYED_LOGS" },
	{ EZFS_REFTAG_RELE, "EZFS_REFTAG_RELE" },
	{ EZFS_REFTAG_HOLD, "EZFS_REFTAG_HOLD" },
	{ EZFS_TAGTOOLONG, "EZFS_TAGTOOLONG" },
	{ EZFS_PIPEFAILED, "EZFS_PIPEFAILED" },
	{ EZFS_THREADCREATEFAILED, "EZFS_THREADCREATEFAILED" },
	{ EZFS_POSTSPLIT_ONLINE, "EZFS_POSTSPLIT_ONLINE" },
	{ EZFS_SCRUBBING, "EZFS_SCRUBBING" },
	{ EZFS_ERRORSCRUBBING, "EZFS_ERRORSCRUBBING" },
	{ EZFS_ERRORSCRUB_PAUSED, "EZFS_ERRORSCRUB_PAUSED" },
	{ EZFS_NO_SCRUB, "EZFS_NO_SCRUB" },
	{ EZFS_DIFF, "EZFS_DIFF" },
	{ EZFS_DIFFDATA, "EZFS_DIFFDATA" },
	{ EZFS_POOLREADONLY, "EZFS_POOLREADONLY" },
	{ EZFS_SCRUB_PAUSED, "EZFS_SCRUB_PAUSED" },
	{ EZFS_SCRUB_PAUSED_TO_CANCEL, "EZFS_SCRUB_PAUSED_TO_CANCEL" },
	{ EZFS_ACTIVE_POOL, "EZFS_ACTIVE_POOL" },
	{ EZFS_CRYPTOFAILED, "EZFS_CRYPTOFAILED" },
	{ EZFS_NO_PENDING, "EZFS_NO_PENDING" },
	{ EZFS_CHECKPOINT_EXISTS, "EZFS_CHECKPOINT_EXISTS" },
	{ EZFS_DISCARDING_CHECKPOINT, "EZFS_DISCARDING_CHECKPOINT" },
	{ EZFS_NO_CHECKPOINT, "EZFS_NO_CHECKPOINT" },
	{ EZFS_DEVRM_IN_PROGRESS, "EZFS_DEVRM_IN_PROGRESS" },
	{ EZFS_VDEV_TOO_BIG, "EZFS_VDEV_TOO_BIG" },
	{ EZFS_IOC_NOTSUPPORTED, "EZFS_IOC_NOTSUPPORTED" },
	{ EZFS_TOOMANY, "EZFS_TOOMANY" },
	{ EZFS_INITIALIZING, "EZFS_INITIALIZING" },
	{ EZFS_NO_INITIALIZE, "EZFS_NO_INITIALIZE" },
	{ EZFS_WRONG_PARENT, "EZFS_WRONG_PARENT" },
	{ EZFS_TRIMMING, "EZFS_TRIMMING" },
	{ EZFS_NO_TRIM, "EZFS_NO_TRIM" },
	{ EZFS_TRIM_NOTSUP, "EZFS_TRIM_NOTSUP" },
	{ EZFS_NO_RESILVER_DEFER, "EZFS_NO_RESILVER_DEFER" },
	{ EZFS_EXPORT_IN_PROGRESS, "EZFS_EXPORT_IN_PROGRESS" },
	{ EZFS_REBUILDING, "EZFS_REBUILDING" },
	{ EZFS_VDEV_NOTSUP, "EZFS_VDEV_NOTSUP" },
	{ EZFS_NOT_USER_NAMESPACE, "EZFS_NOT_USER_NAMESPACE" },
	{ EZFS_CKSUM, "EZFS_CKSUM" },
	{ EZFS_RESUME_EXISTS, "EZFS_RESUME_EXISTS" },
	{ EZFS_SHAREFAILED, "EZFS_SHAREFAILED" },
	{ EZFS_RAIDZ_EXPAND_IN_PROGRESS, "EZFS_RAIDZ_EXPAND_IN_PROGRESS" },
	{ EZFS_ASHIFT_MISMATCH, "EZFS_ASHIFT_MISMATCH" },
	{ EZFS_UNKNOWN, "EZFS_UNKNOWN" },
};

/* Sometimes we get new ZFS errors.
 * If this gets triggered, we need to update lookup table
 */
#define LAST_ZFS_ERR_T EZFS_ASHIFT_MISMATCH
_Static_assert(EZFS_UNKNOWN -1 == LAST_ZFS_ERR_T);

static const struct {
	zpool_status_t status;
	const char *name;
} zpool_status_table[] = {
	{ ZPOOL_STATUS_CORRUPT_CACHE, "ZPOOL_STATUS_CORRUPT_CACHE" },
	{ ZPOOL_STATUS_MISSING_DEV_R, "ZPOOL_STATUS_MISSING_DEV_R" },
	{ ZPOOL_STATUS_MISSING_DEV_NR, "ZPOOL_STATUS_MISSING_DEV_NR" },
	{ ZPOOL_STATUS_CORRUPT_LABEL_R, "ZPOOL_STATUS_CORRUPT_LABEL_R" },
	{ ZPOOL_STATUS_CORRUPT_LABEL_NR, "ZPOOL_STATUS_CORRUPT_LABEL_NR" },
	{ ZPOOL_STATUS_BAD_GUID_SUM, "ZPOOL_STATUS_BAD_GUID_SUM" },
	{ ZPOOL_STATUS_CORRUPT_POOL, "ZPOOL_STATUS_CORRUPT_POOL" },
	{ ZPOOL_STATUS_CORRUPT_DATA, "ZPOOL_STATUS_CORRUPT_DATA" },
	{ ZPOOL_STATUS_FAILING_DEV, "ZPOOL_STATUS_FAILING_DEV" },
	{ ZPOOL_STATUS_VERSION_NEWER, "ZPOOL_STATUS_VERSION_NEWER" },
	{ ZPOOL_STATUS_HOSTID_MISMATCH, "ZPOOL_STATUS_HOSTID_MISMATCH" },
	{ ZPOOL_STATUS_HOSTID_ACTIVE, "ZPOOL_STATUS_HOSTID_ACTIVE" },
	{ ZPOOL_STATUS_HOSTID_REQUIRED, "ZPOOL_STATUS_HOSTID_REQUIRED" },
	{ ZPOOL_STATUS_IO_FAILURE_WAIT, "ZPOOL_STATUS_IO_FAILURE_WAIT" },
	{ ZPOOL_STATUS_IO_FAILURE_CONTINUE, "ZPOOL_STATUS_IO_FAILURE_CONTINUE" },
	{ ZPOOL_STATUS_IO_FAILURE_MMP, "ZPOOL_STATUS_IO_FAILURE_MMP" },
	{ ZPOOL_STATUS_BAD_LOG, "ZPOOL_STATUS_BAD_LOG" },
	{ ZPOOL_STATUS_ERRATA, "ZPOOL_STATUS_ERRATA" },
	{ ZPOOL_STATUS_UNSUP_FEAT_READ, "ZPOOL_STATUS_UNSUP_FEAT_READ" },
	{ ZPOOL_STATUS_UNSUP_FEAT_WRITE, "ZPOOL_STATUS_UNSUP_FEAT_WRITE" },
	{ ZPOOL_STATUS_FAULTED_DEV_R, "ZPOOL_STATUS_FAULTED_DEV_R" },
	{ ZPOOL_STATUS_FAULTED_DEV_NR, "ZPOOL_STATUS_FAULTED_DEV_NR" },
	{ ZPOOL_STATUS_VERSION_OLDER, "ZPOOL_STATUS_VERSION_OLDER" },
	{ ZPOOL_STATUS_FEAT_DISABLED, "ZPOOL_STATUS_FEAT_DISABLED" },
	{ ZPOOL_STATUS_RESILVERING, "ZPOOL_STATUS_RESILVERING" },
	{ ZPOOL_STATUS_OFFLINE_DEV, "ZPOOL_STATUS_OFFLINE_DEV" },
	{ ZPOOL_STATUS_REMOVED_DEV, "ZPOOL_STATUS_REMOVED_DEV" },
	{ ZPOOL_STATUS_REBUILDING, "ZPOOL_STATUS_REBUILDING" },
	{ ZPOOL_STATUS_REBUILD_SCRUB, "ZPOOL_STATUS_REBUILD_SCRUB" },
	{ ZPOOL_STATUS_NON_NATIVE_ASHIFT, "ZPOOL_STATUS_NON_NATIVE_ASHIFT" },
	{ ZPOOL_STATUS_COMPATIBILITY_ERR, "ZPOOL_STATUS_COMPATIBILITY_ERR" },
	{ ZPOOL_STATUS_INCOMPATIBLE_FEAT, "ZPOOL_STATUS_INCOMPATIBLE_FEAT" },
	{ ZPOOL_STATUS_OK, "ZPOOL_STATUS_OK" },
};

/* Sometimes we get new zpool status codes.
 * If this gets triggered, we need to update lookup table
 */
#define LAST_ZPOOL_STATUS_T ZPOOL_STATUS_INCOMPATIBLE_FEAT
_Static_assert(ZPOOL_STATUS_OK -1 == LAST_ZPOOL_STATUS_T);

static const struct {
	zfs_type_t type;
	const char *name;
} zfs_type_table[] = {
	{ ZFS_TYPE_FILESYSTEM, "ZFS_TYPE_FILESYSTEM" },
	{ ZFS_TYPE_SNAPSHOT, "ZFS_TYPE_SNAPSHOT" },
	{ ZFS_TYPE_VOLUME, "ZFS_TYPE_VOLUME" },
	{ ZFS_TYPE_POOL, "ZFS_TYPE_POOL" },
	{ ZFS_TYPE_BOOKMARK, "ZFS_TYPE_BOOKMARK" },
	{ ZFS_TYPE_VDEV, "ZFS_TYPE_VDEV" },
	{ ZFS_TYPE_INVALID, "ZFS_TYPE_INVALID" },
};

/* Flags exposed via ZFS_IOC_GETDOSFLAGS and ZFS_IOC_SETDOSFLAGS */
static const struct {
	uint64_t flag;
	const char *name;
} zfs_dosflag_table[] = {
	{ ZFS_READONLY, "ZFS_READONLY" },
	{ ZFS_HIDDEN, "ZFS_HIDDEN" },
	{ ZFS_SYSTEM, "ZFS_SYSTEM" },
	{ ZFS_ARCHIVE, "ZFS_ARCHIVE" },
	{ ZFS_IMMUTABLE, "ZFS_IMMUTABLE" },
	{ ZFS_NOUNLINK, "ZFS_NOUNLINK" },
	{ ZFS_APPENDONLY, "ZFS_APPENDONLY" },
	{ ZFS_NODUMP, "ZFS_NODUMP" },
	{ ZFS_SPARSE, "ZFS_SPARSE" },
	{ ZFS_OFFLINE, "ZFS_SPARSE" },
};

#endif /* _PYLIBZFS2_ENUMS_H */
